===================================================================
ルールに複数の条件を設定した場合のイベントのTTL問題について
===================================================================

状況の整理
===========

| 今回、Sorry画面切り戻しの設定でも明らかなように、複数のフィルターを条件に設定することが可能です。
| そこで条件が成立するためには、それぞれのフィルターで検知されるイベントがTTL内である必要があります。
| 例えば今回のシナリオでは、後続するリクエスト数が閾値内に回復するイベントが、先行するSorry画面切り替えをした結論イベントのTTL内に発生する必要があります。
| ただ、後続するイベントがいつ発生するかは正確には把握できない場合も多いと思います。
| こうした状況に対処するには、以下の二つの方法が有効です。

A. TTLをできるだけ長くする
   | TTLは最大で2147483647秒（＝約68年）まで設定することが可能です。
   | 余裕をもって設定することで、ルールに評価されるまで時間切れになることを避けることができます。
   
B. TTLが過ぎたら、改めて、同じラベルが付与された結論イベントを発生させる
   | ルールの条件にしたフィルターで検出されるためには、同じラベルが付与されたTTL内のイベントが発生していれば問題ありません。
   | そのため、すでに発生しているイベントのTTLが切れそうになったら、

     | 「必要な後続のイベント発生まで同じラベルが付与された新たなイベントを発生させる」

     ということを続ければ、後続のイベントの発生時期が正確にわからない場合にも対応が可能になります。

   | まず、同じラベルが付与されたイベントを発生させ続けるには、イベントの発生とフィルターでの検知をループさせる設定をすることで実現できます。
   | 具体的には、以下のような動きになります。

     a. 「ラベルA」を検知するフィルターとそのフィルターを条件にしたルールを作成する。その際に、元のイベントに付与されている「ラベルA」を結論イベントに継承するように設定する。
     b. 「ラベルA」が付与されたイベントが発生する
     c. a.で作成したフィルターに検知され、ルールに従い、「ラベルA」が付与されたイベントが発生する  →  b.に戻る
     d. b.とc.の工程がループする形になり、「ラベルA」が付与されたイベントが発生し続ける
   
   | また、同じフィルターが別のルールの条件の一部となっている場合、一方のフィルターに合致するイベントのTTLが経過するまで、どちらのルールの条件に合致するかどうかの評価を待ちます。
   | そして、TTL経過までに条件が揃わなければ、そのフィルターのみを条件とするルールの条件が揃ったと評価される仕様となっています。
   | この仕様を利用して、後続のイベントが発生したらそちらのルールが適用され、ループを抜けることができます。

ラベルの作成
-------------
| ループして作成された、後続イベント待ちのイベントに付与する結論ラベルに使用するラベルを作成します。

| :menuselection:`OASE --> ラベル --> ラベル作成` から、ラベルを作成します。

| :menuselection:`登録` ボタンを押し、以下のラベルの設定を追加していきます。

.. figure::/src/images/learn/quickstart/oase/OASE_advanced_sorry-switch-back/OASE_advanced_sorry-switch-back_ラベル作成詳細画面.png
   :width: 1200px
   :alt: ラベル作成画面

.. list-table:: ラベル作成の設定値
   :widths: 10 10
   :header-rows: 1

   * - ラベルキー
     - カラーコード
   * - :kbd:`event_status`
     -

| 入力が終わったら、:menuselection:`編集確認` ボタンを押して登録します。

ルールの設定
==============

   | 前のシナリオで作成した「sorry画面切り戻し」のルールでは、「sorry_switch」というフィルターが条件の一部になっています。
   | そこに、「sorry_switch」というフィルターのみを条件とした、「Sorry表示中」のルールを作成してみましょう。

| :menuselection:`登録` ボタンを押し、以下のルールの設定を追加していきます。

.. figure::/src/images/learn/quickstart/oase/OASE_advanced_sorry-switch-back/OASE_advanced_sorry-switch-back_ルール設定詳細画面.png
   :width: 1200px
   :alt: ルール
 
.. list-table:: ルールの設定値
   :widths: 10 10 10 10 10 10 10 10 10 10
   :header-rows: 3

   * - 有効
     - ルール名
     - ルールラベル名
     - 優先順位
     - 条件
     - アクション
     - 結論イベント
     - 
     - 
     - 
   * - 
     - 
     - 
     - フィルターA
     - アクションID
     - 
     - 元イベントのラベル継承
     - 
     - 結論ラベル設定
     - TTL 
   * - 
     - 
     - 
     -
     -
     - 
     - 
     - アクション
     - イベント
     - 
   * - :kbd:`True`
     - :kbd:`Sorry表示中`
     - :kbd:`Sorry表示中`
     - :kbd:`2`
     - :kbd:`sorry_switch`
     - 
     - :kbd:`True`
     - :kbd:`True`
     - :kbd:`["event_status", "progress"]`
     - :kbd:`3600`

| 入力が終わったら、:menuselection:`編集確認` ボタンを押して登録します。

.. tip::
   | ルール名やルールラベル名は任意で設定可能です。わかりやすいものを設定しましょう。
   | 必要な結論イベントを発生させるためのルールなので、選択するアクションはありません。

   | 優先順位「1」である「sorry画面切り戻し」のルールに対して、優先順位は「2」にします。
   | 「元イベントのラベル継承」の「イベント」を「true」とすることで、結論ラベルに、フィルター「sorry_switch」で検知された元のイベントのラベルを引き継ぐことができます。
   | 結論ラベルには、結論イベントの性格がわかるようなラベルを設定しておくことで、イベントの判別が容易になります。

   | これにより、「sorry_switch」というフィルターに合致する[["page", "==", "sorry"], ["_exastro_type", "==", "conclusion"]]のラベルが付与された結論イベントが発生したら以下のような動きとなります。

   .. note::
      | ["_exastro_type", "==", "conclusion"]のラベルは、結論イベントにシステム側で付与するデフォルトのラベルになります。
   
    1. そのイベントのTTLが経過するまで、優先順位「1」の「sorry画面切り戻し」のルールに沿うか、評価を待ちます。

     | 「sorry画面切り戻し」の条件がそろえば、「sorry画面切り戻し」のルールに従って動作します。

     | 「sorry画面切り戻し」のルールの沿う条件が揃う ＝ もう一つの条件である「request_range_max」というフィルターに合致するイベントが発生する

    2. もしTTLが経過するまで 「sorry画面切り戻し」のルールの沿う条件がそろわなければ、「Sorry表示中」のルールの評価対象となり、ルールに従って、結論イベントが改めて発生することになります。

   .. warning::
     | 以下の画像のようにTTLを必要以上に短くすると、ループしてイベントを発生させる回数が必要以上に多くなってしまいます。
     | ループを抜けるための、後続するイベントが発生するまでの予測される期間に合わせて、適切なTTLを設定しましょう。

.. figure::/src/images/learn/quickstart/oase/OASE_advanced_sorry-switch-back/OASE_advanced_sorry-switch-back_結果確認.gif
   :width: 1200px
   :alt: イベントフロー_結論イベント